#!/usr/bin/python
# python create_VCF_file_from_Mobster_predictions_for_one_sample.py -i input_Mobster -r input_reference_genome_fastq -s input_sample_id -o output_vcf [-k keep_chr_prefix]
# python create_VCF_file_from_Mobster_predictions_for_one_sample.py -i MGRBp1_sample1000_Mobster_usingproperties_predictions_PRECISE_thu23_3.txt -r /home/biomath/projects_associated_with_mobile_elements_and_telomeres_and_mitochondrial_DNA/fasta_of_hg19/human_g1k_v37.fasta -s AABNW -o MGRBp1_sample1000_Mobster_usingproperties_predictions_PRECISE_thu23_3.vcf
# python create_VCF_file_from_Mobster_predictions_for_one_sample.py \
#	-i MGRBp1_sample1000_sg1_humansingle1_999.picard_sorted.dupmarked_carefulRmvH_usingproperties_predictions.txt \
#	-r /nvme/mobile_elements_2016dec/1000_genomes_hs37d5_fastq/human_g1k_v37.fasta \
#	-s AABNW \
#	-o MGRBp1_sample1000_sg1_humansingle1_999.picard_sorted.dupmarked_carefulRmvH_usingproperties_predictions.vcf 

# Input file "input_Mobster" contains multiple mobile element insertions (MEI), 1 per line, for one sample.
# Produce a new VCF file containing the MEI as variants, one per record.
# Output VCF will contain MEI details in the INFO field.
# Output VCF will contain MEI details for this sample in the sample field, which is the column after the FORMAT field.
#	This occurs only if there are the refined-Mobster fields present on input, from running Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py after Mobster.

# Mobster refers to:
# Genome Biol. 2014;15(10):488.
# Mobster: accurate detection of mobile element insertions in next generation sequencing data.
# Thung DT, de Ligt J, Vissers LE, Steehouwer M, Kroon M, de Vries P, Slagboom EP, Ye K, Veltman JA, Hehir-Kwa JY.

# The inhouse program Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py may be run after Mobster and adds extra fields onto the end of the Mobster record.
# If present, these fields are to be added to the VCF file too. Refined-Mobster input (tab-delimited):
# #Version: 0.1.6
# #Properties file initialization, with following specified values : MAX_DISTANCE_OF_CLIPPED_CLUSTERS=20 TEMP_DIR=/g/data3/zc9/emma_tmp/ LENGTH_99PROCENT_OF_FRAGMENTS=1131 PAIRED_END=true REPEATMASK_FILE=/short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/repmask/hg19_alul1svaerv_empty.txt MOBIOME_MAPPING_CMD=/short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/MOSAIK/MosaikBuild -q (FASTQ) -st illumina -out (DAT_FILE) -quiet && /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/MOSAIK/MosaikAligner -in (DAT_FILE) -out (OUT_FILE) -ia /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/mobiome/54_mobiles_inclHERVK.dat -hs 9 -mmp 0.1 -act 20 -j /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/mobiome/54_mobiles_inclHERVK_hs9 -p 2 -annpe /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/MOSAIK/2.1.26.pe.100.0065.ann -annse /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/MOSAIK/2.1.26.se.100.005.ann -quiet PICARD_COLLECT_INSERT_SIZE_METRICS_JAR=/short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/picard-1.73/CollectInsertSizeMetrics.jar SAMPLENAME=MGRB MAXIMUM_MISMATCHES_POLYA=1 MINIMUM_SUPPORTING_READS=5 NEIGHBORHOOD_WINDOW_BP=200 DISCORDANT_CLUSTER_MAX_DISTANCE=600 IN_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_sg1_humansingle1_999.picard_sorted.dupmarked.bam_noHardClips.bam ANCHOR_BAM_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_anchors.bam MOBIOME_MAPPING_TOOL=mosaik MAXIMUM_CLIP_LENGTH=7 READS_PER_CLUSTER=1 MAX_SPACING_OF_CLIPPED_READS=15 MINIMUM_INITIAL_SPLIT_CLUSTER_READS=2 USE_PICARD=true BAM_FROM_MOBIOME_MAPPING=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_mappedpotentials.bam DISCORDANT_CLUSTERS_MAX_OVERLAP=50 OUT_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT USE_SPLIT=true MINIMUM_POLYA_LENGTH=9 MAX_OVERLAP_OF_CLIPPED_CLUSTERS=50 ANCHOR_SPLIT_BAM_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_splitanchors.bam MULTIPLE_SAMPLE_CALLING=false SD_FRAGMENT_LENGTH=117 MULTIPLE_SAMPLE_CALLING_STRINGENT=false BAM_FROM_POTENTIALMEIFINDER=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_potential.bam MAPPING_TOOL=bwa MEAN_FRAGMENT_LENGTH=444 MINIMUM_AVG_QUALITY=10 MINIMUM_CLIP_LENGTH=35 MAX_RECORDS_IN_RAM=10000000 
# #Creation date: Tue Feb 28 13:38:15 EST 2017
# Chr	Mobile Element	Insert Point	border5	border3	merged	sample	sample_counts	cluster5 length	cluster3 length	cluster5 hits	cluster3 hits	split5 hits	split3 hits	polyA5 hits	polyT5 hits	polyA3 hits	polyT3 hits	original discordant unique	original multiple	original unmapped	leftclipped max dist	rightclipped max dist	leftclipped same pos	rightclipped same pos	clipped avg qual	clipped avg length	target site duplication	MEI_call_quality_from_Mobster_counts	refined_border5	refined_border3	refined_border5_MEI_sequence_fragment_start_pos	refined_border3_MEI_sequence_fragment_start_pos	refined_border5_avg_read_count_for_MEI_read_fragment	refined_border3_avg_read_count_for_MEI_read_fragment	refined_border5_length_of_MEI_read_fragment	refined_border3_length_of_MEI_read_fragment	refined_border5_percent_that_non_MEI_part_of_MEI_fragments_matches_reference	refined_border3_percent_that_non_MEI_part_of_MEI_fragments_matches_reference	refined_ref_seq_spanning_sequence_seen	refined_ref_seq_spanning_sequence_seen_start_pos	refined_ref_seq_spanning_sequence_seen_end_pos	refined_ref_seq_spanning_sequence_seen_num_reads	refined_border5_MEI_sequence_fragment	refined_border3_MEI_sequence_fragment
# 1	L1	566262	566242	566282	false	MGRB	MGRB=13	NA	109	NA	13	0	6	0	0	0	0	7	0	0	0	-1	1.0	0.0	37.72	67.67	unknown	19	566263	566290	566188	566194	6.78666666667	2.0	74	51	98	98	Seen	566263	566290	130	ATACTGCAAGTTCTAGGGTACATGTGCACAACCTGAAGGTTTGTTACGTATGTATGCATGTGCCATGTTGGTGTGCAACTGGCTTCAATCTACTTCTCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGTTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAATCACCTCATTTTCTCGTCTGCACCCATTAACTCGTCATTTAGCATTAGGTATATCTCCAAATGCTTTCCCCCCCC	AGCTAAGCCCTTACTAGACCAATGGGACTTAAACCCACAAACACTTAGTTAACAGCTAAGCACCCTAATCAACTGGCTTCAATCTACTTCTCCCGCCTTTTTTCCCGGCGGCGGGAGAAGTAGATTGAAGCCAGTTGATTAGGGTGCT
# 1	ALU	16637582	16637582	16637582	false	MGRB	MGRB=24	491	502	15	9	4	1	0	0	0	0	19	0	0	0	0	1.0	1.0	35.56	49.8	no tsd	21	16637583	16637583	16637526	16637545	1.50877192982	1.0	50	16	98	61	Seen	16637583	16637583	20	AGTCGGGCGTGGTGGCGCGCGCCCGTAGTCCCAGCTACTTGGGAGGCTGAGGCAGGAGAATGGCATGAACCCAGGAGGCGGAGCTTGCAATAAGCCGAGATCGCGCCCCTGCACTCCAGCCTGGGCGACAGAGTGAGACTCCGTCTCAAAAAAAAAAAAGGGGGGTCAAAGGCCTGGC	GGCCCGGTCGCTCCCCCCTGTACCCCCCACACTTTGGGGCCGGCCCCGCACCCCGGCGGCGGAGCTTGCAATAAGCCGAGATCGCGCCCCTGCGCTCACGCCTGGGCGACAGAGTGAAACTCCGTCTCAAAAAAAAAAAAAGGGGGTCAA
# 1	ALU	16835504	16835484	16835524	false	MGRB	MGRB=14	209	NA	14	NA	9	0	0	0	0	0	5	0	0	-1	1	0.0	0.56	30.8	59.33	unknown	20	16835378	16835422	16835360	16835356	5.44444444444	4.21551724138	17	116	88	86	Seen	16835378	16835422	25	TGAGCCACCGCGCCCGGCGCAATTTTCTCAGTTCTTTTAGAAATTTTAGAAATTTAGAAATTTGGAAATTTCTAGGTCTCATTGCAAGTAAGTCTCCCATTTAATTTGTCTTGTTCTAAAACCAAATTTCTCTCTCTCTTTTTTTTTTTTTTTCCTTCAGACAGAGTCTCACTCTG	GGCCTGAGCCACCGCGCCCGGCGCAATTTTCTCAGTTCTTTTAGAAATTTTAGAAATTTAGAAATTTGGAAATTTCTAGGTCTCATTGCAAGTAAGTCTCCCATTTAATTTGTCTTGTTCTAAAACCAAATTTCTCTCTCTCTCTCTTTTTTTTTTTTCCTTCAGACAGATTCTCACTCTGTG
# 1	SVA	38241509	38241376	38242193	false	MGRB	MGRB=18	334	NA	18	NA	0	0	0	0	0	0	18	0	0	-1	-1	-1	-1	-1	-1	unknown	19	38241383	38241396	38241311	38241303	5.875	1.89830508475	71	53	94	98	Seen	38241383	38241396	10	GGAATTACAGGCACCGCCACCATGCCTGGCTATATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTCCAGATTGGGTGTTAAACAGCAACGTTATACTGCTTTAAAAAACTTCCACATAGCCAGGCGCAGTGGTTCATGCCTGTAATCCCAGCACTTTGGGAAGCCAACGTGGGCAGATCACCTGAGTTCGGGAGTTTAAGACCAGCTTGACCAACATGGAGAAACCCCATCCCCAC	TGGGCTCCTGGGCTCAAGTGATCCATTTGCCTCAGCCTCCCAAAGTGCTGGGATTATGGGCATGGGCCACCACACCTGGCCCAGATTGGGTTTTTTTTGTTTTTTTTTTTGTTTTGTTTTTTTTTTTAAATTTATTTTTTTATTGAT
# 1	L1	42483964	42483960	42483970	false	MGRB	MGRB=30	397	239	20	10	0	0	0	0	0	0	30	0	0	-1	-1	-1	-1	-1	-1	duplication	21	42483961	42483970	42483894	42483831	3.05970149254	5.6049382716	66	81	98	98	Seen	42483961	42483970	14	CTAACCTGCACAATGTGCACATGTACCCTAAAACTTAGAGTATAATAAAAAAAAAAAAAAAAAAAAAAAGAAATGTTTGGCTATTCTAAGGATATACAGATATTCTCTTATGTTTTCTTTTAAGAGCTTTATTGTCTTACCTAATATATATAGACCTACAATGCAGCTAGAATTGATATTTGTGAATGGCTTGAGGAAGATTCTTTTTTTCCCGTATGGATTCTAAATTGAGTAAGCAAGATT	ATCTTCTCCTACTCTGGGCTTGCTCTTTCATTCCCTTAATAGTATCTTTTGATGATCAGAATTTCTTGAGTTTAGTTTAATCTAGTTTATCAATATTTTCCTTTATAGTTAGTCCTTCTGTGTAATGTTTAAGAAATGTTAAACATTACACAGAAGGACTAACCTAAGCCAAAAGAACAAAGCTGGAGGCATCACACTACCTGACTTCAAACTATACTACA
# 1	L1	48584401	48584381	48584421	false	MGRB	MGRB=6	123	NA	6	NA	3	0	0	0	0	0	3	0	0	-1	0	0.0	1.0	29.09	52.0	unknown	16		48584401		48584217		5.09239130435		50		98						CAATTTGGGTTGGTTCCACTTCTTTGCTATTGTGAATAGTGCCACAATAAACACACGTTTGCATGTGTCTTTATAGCAGCATGATTTATAATCCTTTGGGTATATACCCAGTAATGGGATGGCTGGGTCAAATGGTATTTCTAGTTCTAGATCCCGGAGGAATCGCCACACTGACTTCCACAATGATTTATAATCCTTTGGGTATATACCCAGTAAGGGGATGGCTGGGTCAAATGGTATT
# 1	L1	121479216	121479187	121479250	false	MGRB	MGRB=7	249	152	4	3	0	0	0	0	0	0	7	0	0	-1	-1	-1	-1	-1	-1	unknown
# 1	HERV	142915499	142915398	142916151	false	MGRB	MGRB=24	398	NA	24	NA	0	0	0	0	0	0	24	0	0	-1	-1	-1	-1	-1	-1	unknown	20	142915271	142915298	142915159	142915168	1.0	1.0	12	10	98	82	Seen	142915271	142915298	89	GGTTTTACCCTGGTGTTTATTAACAGCAAGCCCGTTATTAGCATTGTTTCTATAGATATTAGATTAAATAAAATTATTCTTTATGGGAAACGACGGGATGCGCGAACTACACGGAATAGGTTGGGCTAGTTAACCGCAGCAGAAGCATGTTCTTAAGGCACAGATCACTCATGCTATTGTTTGTGGCTTAAGAATGCCTTTAAGTGGTTTTCCACCCTGGACGGGCCAGGTATTCCTTGTCCTCATTCTGGTACACCCACA	CACGTGTTTATTAACAGCAAGCCAGTCATTAGCATTGTTTCGATAGAGATTAGATTAACTAAAATTATCCATTATGGGAAACGAGGGGATGCGCGGAATAAAGGGAATAGGTTGGCCTAGTAACCCGCGGCGGAGCCGGGTTCTTAGGCCCCGGACCCCCCAGCCAATGGTTTGGGGCTTAGGAATGCCTTTAGGGGGTTTCCCCCCCGGG
# 1	ALU	148785424	148785389	148785458	false	MGRB	MGRB=7	146	455	1	6	0	0	0	0	0	0	7	0	0	-1	-1	-1	-1	-1	-1	unknown	14	148785622		148785535		7.57471264368		86		98						AAAAATACAAAAATTAGCCGGGCGTCATGGCGGGCACCTGTAGTCCCAGCTACTAGGGAGGCTGAGGCAGGAGAATCATTTATTAGTAAGGTCATTTATTAGTAAGGAAGAGAAGCAAGCACCAAGATTTAAGGCAGGAAGGGATAGGCTAACTCTACTGCTTTGTGCAAATGTAGTCGGGTTTATGATCAGGGCTGCCCTTAACTATAAAGCTGCTAACCCCTGAGTCTTG	
# 8	ALU	71914578	71914578	71914591	false	MGRB	MGRB=39	494	517	26	13	7	4	0	0	4	0	28	0	0	0	0	1.0	1.0	35.61	47.45	duplication	24	71914579	71914591	71914506	71914326	4.23287671233	5.64516129032	72	62	98	98	Seen	71914579	71914591	15	AGTCCGCAGTCCCACCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAAAAAAAATAAATAAATAAAATAAAAAAAAATAAAAGCTAAAGCCGTGGTAGGTTTTTGTTTTTTTTCCGAAATAATTCCAGTTGTGTTTATCTATATTATTTTTCTTTTAGTATGTTCTGTCTCTCAATTAACAGCATAGTATATTAGCTTTCTAATTCTGTTT	CTTTAATTGAATACTGGCTATCATGAAGTCCTAAGAGAAATTCCACTACTGTTTTCAGGCCATTGTGATACCATATAAGGAATTGGCTGTCATTTTAGTAAATGTAGTTAATTCTATCATGTCCTAACAGGCTGGGTCGGTGGTCGAATTGTTGGAGAGATTGGGGTTGACGATAGTCTATAAACTACGAGGAAGGGCTCACCATATGTGGTAAGAGTTTTGTTTCAAATAATTTTAATCTAATTTAATGTTTAAAATAAAAGCTAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGTGGATC
# 8	L1	72013164	72013164	72013166	false	MGRB	MGRB=13	NA	238	7	6	7	4	0	0	4	0	2	0	0	4	0	0.5	1.0	38.31	59.45	duplication	21	72013163	72013166	72013099	72013021	3.3125	6.93150684932	63	73	98	98	Seen	72013163	72013166	18	AAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATATACCTCAAAGGTTCATAGGAATATCATTTTTCGTGTGTGAGATATTTATTTGTGTTAGTTTGCATGGATATAGCAATGATTTGAATGGGGAAATGAGGAGATTTTTT	TTTTATGAAAATTACACTGTCCTGAATCATTCATGTGGTGTCTATTTGGTTGTAGGTCACACTGTTTTACATTATTTTCATTTTTGAATAAATCAGGGTTTTTTCAGTGGTTTAATAGTCTATCTTAAAGAAGAATTGTTCTAAATGATAGTATTGGGAGATATACCTAATGCTAGATGACACATTAGTGGGTGCAGCGCACCAGCATGGCACATGTAT
# 8	ALU	88410424	88410424	88410437	false	MGRB	MGRB=19	560	147	12	7	5	6	0	5	0	0	8	0	0	0	0	1.0	1.0	29.29	64.55	duplication	22	88410423	88410442	88410351	88410173	1.59722222222	3.20833333333	71	10	98	96	Seen	88410423	88410442	14	GGCTTTCGCCGTTTTAGCCGGGATGTGCTCGTCCTCCTGACCTCGTCATCCGCCCGCCTCGGCCTCCCAAAGTTGAAATATTTTCTTATTTTCTTATAAATCTATTTTCTGGAGATATCTAAGCATTCATGTATAGATTTTGGTAAGTTTAAAAATTAGACATTTTCCATTTCTAGTACCATCCAATTTTATTCCTATTTGTTGCCAAATACAGGGCCCTCTTTTTCAGAGAAAATGGCCTTCCATAGAAACTCG	GACTGGCTCCTCCGTCCCTGCGTCGAGGATTATGAGGCCTCCCCAGCCATGTGGAACTGTAAGTCCAATAAACCTCTTTCATTTGTAAATTGCTCAGTCTCGGGTATATCTTTATCAGTGAAAATGGACTAATACGTCATCAATTTTCTCAAAGTTTTTAGATATCAGCATCTTTATAATATGGCCTGGATTATACCTGTGTTGTCAGCAAACACCTTTTTGCAAGGGTTCTCATGTTATATTAATAGATTTGAAATATTTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGAC
# 8	L1	128533829	128533829	128533850	false	MGRB	MGRB=70	470	NA	52	18	16	18	0	0	18	0	36	0	0	0	0	1.0	1.0	34.95	56.26	duplication	27	128533830	128533850	128533749	128533734	8.12345679012	7.4328358209	80	67	98	98	NotSeen	128533830	128533850	0	ACGTGAGTAAATATGAAAAATTATATATGTAGTCTTCATATGTGAGTAAATAAAAACTATACATACAAAAAAAATAAAAAAAAATAAATGGTAAGCTATATAATATTGTAAGTAAGACAGTATCTTAAAGATGTGAATTTTCCCCAAATAGATCTATAAATTTAATGATATTTTACCACAAATCCTAACAGCATGTTTTCATATACCTTAACTGATTCTAAAATTTGAAAAAAAGTTCAAGAATAGCCAAGATGCTCCTGAGGATGTAAATCAAAGTTATGGGACATCCCCAGTAGGATATCAATAACTGTTACAGAGATTTAGGGATTAAGCCAGCGTGGTGCTGGTGCAGAAATTAACAAATAGGAAAAAAATAGAGTGCCTATGAACAAACATATACCCAAAATGGAAACTGTTATTTACAAAATGGTCATTGCAGATCACAGGAAAAATAACTTTTTAATAAATTGCACCAGAATAATGATTATTTATAAGT	GTGGTATTATTAAATATAATGCACACAATAAGAAAAAGTGTAAGCCATTTATGGATAATATTGTAAAACTTAATGGAAAGACATTAAAGGAAATCTAAATAAATGGTAAGCTATATATGTATACATGTGCCGTGCTGGTGCGCTGCACCCACTAACTCGTCATCTAGCATTAGGTATATCTCCC
# 10	ALU	120769116	120769116	120769130	false	MGRB	MGRB=23	404	132	15	8	5	4	0	0	4	0	14	0	0	0	0	1.0	1.0	31.93	66.78	duplication	22	120769117	120769130	120769079	120768896	3.0	4.10666666667	30	75	98	98	Seen	120769117	120769130	14	GAACCCCCCACCAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAGCAAGACCCTGTCTCTAAAATAATAACAATAGTATTTTGGAATTATATCATAGTTACAGATGTATATCATGAGCATTCACCTGTGTCATGAAAAATTAATAGAGGCCAGGCGCGATGGCTCACACCTGTAATCCC	CAACGTTGGGGAGGAACAACAGGGATCTTCGATAACCCCACAGCCCAGCGAGAACCACTGTTAATACTTTGGAATTCCGCCACGCCCAGTAGCTCGATGTGCCCCTCCTGCTTTCGCCCCCCAAAGCACTTTGGGAGGCCAAAGCAGGAGGATCACTTGAGCCTAGGAGTTTAAGGCTGCAATGAGCTATGATCATGCCACTGTACTCTAGCCTGGGCAACAAGAGCAAGACCCTTGGGCCTGGCGCGGTGGCTTACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGACAGGCGGATCACAAGGGCAGG


# Mobster input (tab-delimited), in the case that inhouse program Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py has not been run on the data:
# #Version: 0.1.6
# #Properties file initialization, with following specified values : MAX_DISTANCE_OF_CLIPPED_CLUSTERS=20 TEMP_DIR=/g/data3/zc9/emma_tmp/ LENGTH_99PROCENT_OF_FRAGMENTS=1131 PAIRED_END=true REPEATMASK_FILE=/short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/repmask/hg19_alul1svaerv_empty.txt MOBIOME_MAPPING_CMD=/short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/MOSAIK/MosaikBuild -q (FASTQ) -st illumina -out (DAT_FILE) -quiet && /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/MOSAIK/MosaikAligner -in (DAT_FILE) -out (OUT_FILE) -ia /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/mobiome/54_mobiles_inclHERVK.dat -hs 9 -mmp 0.1 -act 20 -j /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/mobiome/54_mobiles_inclHERVK_hs9 -p 2 -annpe /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/MOSAIK/2.1.26.pe.100.0065.ann -annse /short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/MOSAIK/2.1.26.se.100.005.ann -quiet PICARD_COLLECT_INSERT_SIZE_METRICS_JAR=/short/wq2/emr913/mobile_elements_2016dec/Mobster_for_running/Mobster/picard-1.73/CollectInsertSizeMetrics.jar SAMPLENAME=MGRB MAXIMUM_MISMATCHES_POLYA=1 MINIMUM_SUPPORTING_READS=5 NEIGHBORHOOD_WINDOW_BP=200 DISCORDANT_CLUSTER_MAX_DISTANCE=600 IN_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_sg1_humansingle1_999.picard_sorted.dupmarked.bam_noHardClips.bam ANCHOR_BAM_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_anchors.bam MOBIOME_MAPPING_TOOL=mosaik MAXIMUM_CLIP_LENGTH=7 READS_PER_CLUSTER=1 MAX_SPACING_OF_CLIPPED_READS=15 MINIMUM_INITIAL_SPLIT_CLUSTER_READS=2 USE_PICARD=true BAM_FROM_MOBIOME_MAPPING=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_mappedpotentials.bam DISCORDANT_CLUSTERS_MAX_OVERLAP=50 OUT_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT USE_SPLIT=true MINIMUM_POLYA_LENGTH=9 MAX_OVERLAP_OF_CLIPPED_CLUSTERS=50 ANCHOR_SPLIT_BAM_FILE=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_splitanchors.bam MULTIPLE_SAMPLE_CALLING=false SD_FRAGMENT_LENGTH=117 MULTIPLE_SAMPLE_CALLING_STRINGENT=false BAM_FROM_POTENTIALMEIFINDER=/g/data3/zc9/MGRB_mobile_elements_2017mar/MGRBp1_sample1000_includeMEregions_OUT_potential.bam MAPPING_TOOL=bwa MEAN_FRAGMENT_LENGTH=444 MINIMUM_AVG_QUALITY=10 MINIMUM_CLIP_LENGTH=35 MAX_RECORDS_IN_RAM=10000000 
# #Creation date: Tue Feb 28 13:38:15 EST 2017
# Chr	Mobile Element	Insert Point	border5	border3	merged	sample	sample_counts	cluster5 length	cluster3 length	cluster5 hits	cluster3 hits	split5 hits	split3 hits	polyA5 hits	polyT5 hits	polyA3 hits	polyT3 hits	original discordant unique	original multiple	original unmapped	leftclipped max dist	rightclipped max dist	leftclipped same pos	rightclipped same pos	clipped avg qual	clipped avg length	target site duplication
# chr1	L1	566262	566242	566282	false	MGRB	MGRB=13	NA	109	NA	13	0	6	0	0	0	0	7	0	0	0	-1	1.0	0.0	37.72	67.67	unknown
# chr1	ALU	3995332	3994705	3995409	false	MGRB	MGRB=10	NA	447	NA	10	0	0	0	0	0	0	10	0	0	-1	-1	-1	-1	-1	-1	unknown
# chr1	ALU	16637582	16637582	16637582	false	MGRB	MGRB=24	491	502	15	9	4	1	0	0	0	0	19	0	0	0	0	1.0	1.0	35.56	49.8	no tsd
# chr1	ALU	16835504	16835484	16835524	false	MGRB	MGRB=14	209	NA	14	NA	9	0	0	0	0	0	5	0	0	-1	1	0.0	0.56	30.8	59.33	unknown
# chr1	SVA	38241509	38241376	38242193	false	MGRB	MGRB=18	334	NA	18	NA	0	0	0	0	0	0	18	0	0	-1	-1	-1	-1	-1	-1	unknown
# chr1	L1	42483964	42483960	42483970	false	MGRB	MGRB=30	397	239	20	10	0	0	0	0	0	0	30	0	0	-1	-1	-1	-1	-1	-1	duplication
# chr1	L1	48584401	48584381	48584421	false	MGRB	MGRB=6	123	NA	6	NA	3	0	0	0	0	0	3	0	0	-1	0	0.0	1.0	29.09	52.0	unknown
# chr1	L1	121479216	121479187	121479250	false	MGRB	MGRB=7	249	152	4	3	0	0	0	0	0	0	7	0	0	-1	-1	-1	-1	-1	-1	unknown
# chr1	HERV	142915499	142915398	142916151	false	MGRB	MGRB=24	398	NA	24	NA	0	0	0	0	0	0	24	0	0	-1	-1	-1	-1	-1	-1	unknown
# chr1	ALU	148785424	148785389	148785458	false	MGRB	MGRB=7	146	455	1	6	0	0	0	0	0	0	7	0	0	-1	-1	-1	-1	-1	-1	unknown
# chr8	ALU	71914578	71914578	71914591	false	MGRB	MGRB=39	494	517	26	13	7	4	0	0	4	0	28	0	0	0	0	1.0	1.0	35.61	47.45	duplication
# chr8	L1	72013164	72013164	72013166	false	MGRB	MGRB=13	NA	238	7	6	7	4	0	0	4	0	2	0	0	4	0	0.5	1.0	38.31	59.45	duplication
# chr8	ALU	88410424	88410424	88410437	false	MGRB	MGRB=19	560	147	12	7	5	6	0	5	0	0	8	0	0	0	0	1.0	1.0	29.29	64.55	duplication
# chr8	L1	128533829	128533829	128533850	false	MGRB	MGRB=70	470	NA	52	18	16	18	0	0	18	0	36	0	0	0	0	1.0	1.0	34.95	56.26	duplication
# chr10	ALU	120769116	120769116	120769130	false	MGRB	MGRB=23	404	132	15	8	5	4	0	0	4	0	14	0	0	0	0	1.0	1.0	31.93	66.78	duplication


# Example output VCF from this program (tab-delimited):

# ##fileformat=VCFv4.2
# ##fileDate=20170601
# ##ALT=<ID=INS:ME:ALU,Description="Insertion of ALU element">
# ##ALT=<ID=INS:ME:L1,Description="Insertion of L1 element">
# ##ALT=<ID=INS:ME:HERV,Description="Insertion of HERV element">
# ##ALT=<ID=INS:ME:SVA,Description="Insertion of SVA element">
# ##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description="Imprecise structural variation">
# ##INFO=<ID=SVTYPE,Number=1,Type=String,Description="Type of structural variant">
# ##INFO=<ID=MEINFO,Number=4,Type=String,Description="Mobile element info of the form NAME,START,END,POLARITY">
# ##INFO=<ID=TARGETSITEDUPL,Number=1,Type=String,Description="Did a small part of this recognition site get duplicated or deleted during the insertion event. Values:duplication,deletion,noTSD,unknown">
# ##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
# ##FORMAT=<ID=MEIQUAL,Number=1,Type=String,Description="Quality_score for MEI call based on Mobster read counts log10((split5*10+split3*10+discord5*2+discord3*2+polyA5*2+polyT5*2+polyA3*2+polyT3*2+original_discordant_unique*2)*10">
# ##FORMAT=<ID=MEI5MB,Number=1,Type=String,Description="Mobster_border_5_one_base_pair_after_MEI_3_prime used by Mobster to call MEI">
# ##FORMAT=<ID=MEI3MB,Number=1,Type=String,Description="Mobster_border_3_one_base_pair_before_MEI_5_prime used by Mobster to call MEI">
# ##FORMAT=<ID=MEIDU,Number=1,Type=String,Description="Mobster target_site_duplication used by Mobster to call MEI">
# ##FORMAT=<ID=MEIPLY,Number=1,Type=String,Description="poly-A or poly-T sequence seen in MEI or near insertion point. Values are A,T (for whether a poly-A or poly-T sequence was seen respectively), indicating gene direction">
# ##FORMAT=<ID=MEI5RB,Number=1,Type=String,Description="refined_border_5_one_base_pair_after_MEI_3_prime used to refine the Mobster MEI call">
# ##FORMAT=<ID=MEI3RB,Number=1,Type=String,Description="refined_border_3_one_base_pair_before_MEI_5_prime used to refine the Mobster MEI call">
# ##FORMAT=<ID=MEI5SP,Number=1,Type=String,Description="refined_border_5_MEI_fragment_start_pos used to refine the Mobster MEI call">
# ##FORMAT=<ID=MEI3SP,Number=1,Type=String,Description="refined_border_3_MEI_fragment_start_pos used to refine the Mobster MEI call">
# ##FORMAT=<ID=MEI5SQ,Number=1,Type=String,Description="refined_border_5_MEI_fragment_sequence used to refine the Mobster MEI call">
# ##FORMAT=<ID=MEI3SQ,Number=1,Type=String,Description="refined_border_3_MEI_fragment_sequence used to refine the Mobster MEI call">
# #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	FR07923044
# 1	566262	.	T	<INS:ME:L1>	19	.	IMPRECISE;SVTYPE=INS;MEINFO=L1,-20,20,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:19:566242:566282:unknown:.:566263:566290:566188:566194:ATACTGCAAGTTCTAGGGTACATGTGCACAACCTGAAGGTTTGTTACGTATGTATGCATGTGCCATGTTGGTGTGCAACTGGCTTCAATCTACTTCTCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGTTTGAAGCTGCTTCTTCGAATTTGCAATTCAATATGAAAATCACCTCATTTTCTCGTCTGCACCCATTAACTCGTCATTTAGCATTAGGTATATCTCCAAATGCTTTCCCCCCCC:AGCTAAGCCCTTACTAGACCAATGGGACTTAAACCCACAAACACTTAGTTAACAGCTAAGCACCCTAATCAACTGGCTTCAATCTACTTCTCCCGCCTTTTTTCCCGGCGGCGGGAGAAGTAGATTGAAGCCAGTTGATTAGGGTGCT
# 1	16637582	.	G	<INS:ME:ALU>	21	.	SVTYPE=INS;MEINFO=ALU,0,0,.;TARGETSITEDUPL=noTSD	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:21:16637582:16637582:noTSD:A:16637583:16637583:16637526:16637545:AGTCGGGCGTGGTGGCGCGCGCCCGTAGTCCCAGCTACTTGGGAGGCTGAGGCAGGAGAATGGCATGAACCCAGGAGGCGGAGCTTGCAATAAGCCGAGATCGCGCCCCTGCACTCCAGCCTGGGCGACAGAGTGAGACTCCGTCTCAAAAAAAAAAAAGGGGGGTCAAAGGCCTGGC:GGCCCGGTCGCTCCCCCCTGTACCCCCCACACTTTGGGGCCGGCCCCGCACCCCGGCGGCGGAGCTTGCAATAAGCCGAGATCGCGCCCCTGCGCTCACGCCTGGGCGACAGAGTGAAACTCCGTCTCAAAAAAAAAAAAAGGGGGTCAA
# 1	16835504	.	T	<INS:ME:ALU>	20	.	SVTYPE=INS;MEINFO=ALU,-20,20,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:20:16835484:16835524:unknown:T:16835378:16835422:16835360:16835356:TGAGCCACCGCGCCCGGCGCAATTTTCTCAGTTCTTTTAGAAATTTTAGAAATTTAGAAATTTGGAAATTTCTAGGTCTCATTGCAAGTAAGTCTCCCATTTAATTTGTCTTGTTCTAAAACCAAATTTCTCTCTCTCTTTTTTTTTTTTTTTCCTTCAGACAGAGTCTCACTCTG:GGCCTGAGCCACCGCGCCCGGCGCAATTTTCTCAGTTCTTTTAGAAATTTTAGAAATTTAGAAATTTGGAAATTTCTAGGTCTCATTGCAAGTAAGTCTCCCATTTAATTTGTCTTGTTCTAAAACCAAATTTCTCTCTCTCTCTCTTTTTTTTTTTTCCTTCAGACAGATTCTCACTCTGTG
# 1	38241509	.	G	<INS:ME:SVA>	19	.	IMPRECISE;SVTYPE=INS;MEINFO=SVA,-133,684,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:19:38241376:38242193:unknown:T:38241383:38241396:38241311:38241303:GGAATTACAGGCACCGCCACCATGCCTGGCTATATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTCCAGATTGGGTGTTAAACAGCAACGTTATACTGCTTTAAAAAACTTCCACATAGCCAGGCGCAGTGGTTCATGCCTGTAATCCCAGCACTTTGGGAAGCCAACGTGGGCAGATCACCTGAGTTCGGGAGTTTAAGACCAGCTTGACCAACATGGAGAAACCCCATCCCCAC:TGGGCTCCTGGGCTCAAGTGATCCATTTGCCTCAGCCTCCCAAAGTGCTGGGATTATGGGCATGGGCCACCACACCTGGCCCAGATTGGGTTTTTTTTGTTTTTTTTTTTGTTTTGTTTTTTTTTTTAAATTTATTTTTTTATTGAT
# 1	42483965	.	A	<INS:ME:L1>	21	.	SVTYPE=INS;MEINFO=L1,-4,5,.;TARGETSITEDUPL=duplication	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:21:42483960:42483970:duplication:A:42483961:42483970:42483894:42483831:CTAACCTGCACAATGTGCACATGTACCCTAAAACTTAGAGTATAATAAAAAAAAAAAAAAAAAAAAAAAGAAATGTTTGGCTATTCTAAGGATATACAGATATTCTCTTATGTTTTCTTTTAAGAGCTTTATTGTCTTACCTAATATATATAGACCTACAATGCAGCTAGAATTGATATTTGTGAATGGCTTGAGGAAGATTCTTTTTTTCCCGTATGGATTCTAAATTGAGTAAGCAAGATT:ATCTTCTCCTACTCTGGGCTTGCTCTTTCATTCCCTTAATAGTATCTTTTGATGATCAGAATTTCTTGAGTTTAGTTTAATCTAGTTTATCAATATTTTCCTTTATAGTTAGTCCTTCTGTGTAATGTTTAAGAAATGTTAAACATTACACAGAAGGACTAACCTAAGCCAAAAGAACAAAGCTGGAGGCATCACACTACCTGACTTCAAACTATACTACA
# 1	48584401	.	G	<INS:ME:L1>	16	.	IMPRECISE;SVTYPE=INS;MEINFO=L1,-20,20,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	1/.:16:48584381:48584421:unknown:.:.:48584401:.:48584217:.:CAATTTGGGTTGGTTCCACTTCTTTGCTATTGTGAATAGTGCCACAATAAACACACGTTTGCATGTGTCTTTATAGCAGCATGATTTATAATCCTTTGGGTATATACCCAGTAATGGGATGGCTGGGTCAAATGGTATTTCTAGTTCTAGATCCCGGAGGAATCGCCACACTGACTTCCACAATGATTTATAATCCTTTGGGTATATACCCAGTAAGGGGATGGCTGGGTCAAATGGTATT
# 1	121479216	.	T	<INS:ME:L1>	14	.	IMPRECISE;SVTYPE=INS;MEINFO=L1,-29,34,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	1/.:14:121479187:121479250:unknown:.:.:.:.:.:.:.
# 1	142915499	.	C	<INS:ME:HERV>	20	.	IMPRECISE;SVTYPE=INS;MEINFO=HERV,-101,652,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:20:142915398:142916151:unknown:.:142915271:142915298:142915159:142915168:GGTTTTACCCTGGTGTTTATTAACAGCAAGCCCGTTATTAGCATTGTTTCTATAGATATTAGATTAAATAAAATTATTCTTTATGGGAAACGACGGGATGCGCGAACTACACGGAATAGGTTGGGCTAGTTAACCGCAGCAGAAGCATGTTCTTAAGGCACAGATCACTCATGCTATTGTTTGTGGCTTAAGAATGCCTTTAAGTGGTTTTCCACCCTGGACGGGCCAGGTATTCCTTGTCCTCATTCTGGTACACCCACA:CACGTGTTTATTAACAGCAAGCCAGTCATTAGCATTGTTTCGATAGAGATTAGATTAACTAAAATTATCCATTATGGGAAACGAGGGGATGCGCGGAATAAAGGGAATAGGTTGGCCTAGTAACCCGCGGCGGAGCCGGGTTCTTAGGCCCCGGACCCCCCAGCCAATGGTTTGGGGCTTAGGAATGCCTTTAGGGGGTTTCCCCCCCGGG
# 1	148785424	.	G	<INS:ME:ALU>	14	.	IMPRECISE;SVTYPE=INS;MEINFO=ALU,-35,34,.;TARGETSITEDUPL=unknown	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	1/.:14:148785389:148785458:unknown:.:148785622:.:148785535:.:AAAAATACAAAAATTAGCCGGGCGTCATGGCGGGCACCTGTAGTCCCAGCTACTAGGGAGGCTGAGGCAGGAGAATCATTTATTAGTAAGGTCATTTATTAGTAAGGAAGAGAAGCAAGCACCAAGATTTAAGGCAGGAAGGGATAGGCTAACTCTACTGCTTTGTGCAAATGTAGTCGGGTTTATGATCAGGGCTGCCCTTAACTATAAAGCTGCTAACCCCTGAGTCTTG:.
# 8	71914585	.	A	<INS:ME:ALU>	24	.	SVTYPE=INS;MEINFO=ALU,-6,6,.;TARGETSITEDUPL=duplication	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:24:71914578:71914591:duplication:A:71914579:71914591:71914506:71914326:AGTCCGCAGTCCCACCTGGGCGACAGAGCGAGACTCCGTCTCAAAAAAAAAAAATAAATAAATAAAATAAAAAAAAATAAAAGCTAAAGCCGTGGTAGGTTTTTGTTTTTTTTCCGAAATAATTCCAGTTGTGTTTATCTATATTATTTTTCTTTTAGTATGTTCTGTCTCTCAATTAACAGCATAGTATATTAGCTTTCTAATTCTGTTT:CTTTAATTGAATACTGGCTATCATGAAGTCCTAAGAGAAATTCCACTACTGTTTTCAGGCCATTGTGATACCATATAAGGAATTGGCTGTCATTTTAGTAAATGTAGTTAATTCTATCATGTCCTAACAGGCTGGGTCGGTGGTCGAATTGTTGGAGAGATTGGGGTTGACGATAGTCTATAAACTACGAGGAAGGGCTCACCATATGTGGTAAGAGTTTTGTTTCAAATAATTTTAATCTAATTTAATGTTTAAAATAAAAGCTAGGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGTGGATC
# 8	72013164	.	A	<INS:ME:L1>	21	.	SVTYPE=INS;MEINFO=L1,-1,2,.;TARGETSITEDUPL=duplication	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:21:72013164:72013166:duplication:A:72013163:72013166:72013099:72013021:AAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATATACCTCAAAGGTTCATAGGAATATCATTTTTCGTGTGTGAGATATTTATTTGTGTTAGTTTGCATGGATATAGCAATGATTTGAATGGGGAAATGAGGAGATTTTTT:TTTTATGAAAATTACACTGTCCTGAATCATTCATGTGGTGTCTATTTGGTTGTAGGTCACACTGTTTTACATTATTTTCATTTTTGAATAAATCAGGGTTTTTTCAGTGGTTTAATAGTCTATCTTAAAGAAGAATTGTTCTAAATGATAGTATTGGGAGATATACCTAATGCTAGATGACACATTAGTGGGTGCAGCGCACCAGCATGGCACATGTAT
# 8	88410424	.	T	<INS:ME:ALU>	22	.	IMPRECISE;SVTYPE=INS;MEINFO=ALU,0,13,.;TARGETSITEDUPL=duplication	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:22:88410424:88410437:duplication:T:88410423:88410442:88410351:88410173:GGCTTTCGCCGTTTTAGCCGGGATGTGCTCGTCCTCCTGACCTCGTCATCCGCCCGCCTCGGCCTCCCAAAGTTGAAATATTTTCTTATTTTCTTATAAATCTATTTTCTGGAGATATCTAAGCATTCATGTATAGATTTTGGTAAGTTTAAAAATTAGACATTTTCCATTTCTAGTACCATCCAATTTTATTCCTATTTGTTGCCAAATACAGGGCCCTCTTTTTCAGAGAAAATGGCCTTCCATAGAAACTCG:GACTGGCTCCTCCGTCCCTGCGTCGAGGATTATGAGGCCTCCCCAGCCATGTGGAACTGTAAGTCCAATAAACCTCTTTCATTTGTAAATTGCTCAGTCTCGGGTATATCTTTATCAGTGAAAATGGACTAATACGTCATCAATTTTCTCAAAGTTTTTAGATATCAGCATCTTTATAATATGGCCTGGATTATACCTGTGTTGTCAGCAAACACCTTTTTGCAAGGGTTCTCATGTTATATTAATAGATTTGAAATATTTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGAC
# 8	128533840	.	T	<INS:ME:L1>	27	.	SVTYPE=INS;MEINFO=L1,-10,10,.;TARGETSITEDUPL=duplication	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	1/1:27:128533829:128533850:duplication:A:128533830:128533850:128533749:128533734:ACGTGAGTAAATATGAAAAATTATATATGTAGTCTTCATATGTGAGTAAATAAAAACTATACATACAAAAAAAATAAAAAAAAATAAATGGTAAGCTATATAATATTGTAAGTAAGACAGTATCTTAAAGATGTGAATTTTCCCCAAATAGATCTATAAATTTAATGATATTTTACCACAAATCCTAACAGCATGTTTTCATATACCTTAACTGATTCTAAAATTTGAAAAAAAGTTCAAGAATAGCCAAGATGCTCCTGAGGATGTAAATCAAAGTTATGGGACATCCCCAGTAGGATATCAATAACTGTTACAGAGATTTAGGGATTAAGCCAGCGTGGTGCTGGTGCAGAAATTAACAAATAGGAAAAAAATAGAGTGCCTATGAACAAACATATACCCAAAATGGAAACTGTTATTTACAAAATGGTCATTGCAGATCACAGGAAAAATAACTTTTTAATAAATTGCACCAGAATAATGATTATTTATAAGT:GTGGTATTATTAAATATAATGCACACAATAAGAAAAAGTGTAAGCCATTTATGGATAATATTGTAAAACTTAATGGAAAGACATTAAAGGAAATCTAAATAAATGGTAAGCTATATATGTATACATGTGCCGTGCTGGTGCGCTGCACCCACTAACTCGTCATCTAGCATTAGGTATATCTCCC
# 10	120769123	.	A	<INS:ME:ALU>	22	.	SVTYPE=INS;MEINFO=ALU,-6,7,.;TARGETSITEDUPL=duplication	GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ	0/1:22:120769116:120769130:duplication:A:120769117:120769130:120769079:120768896:GAACCCCCCACCAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAGCAAGACCCTGTCTCTAAAATAATAACAATAGTATTTTGGAATTATATCATAGTTACAGATGTATATCATGAGCATTCACCTGTGTCATGAAAAATTAATAGAGGCCAGGCGCGATGGCTCACACCTGTAATCCC:CAACGTTGGGGAGGAACAACAGGGATCTTCGATAACCCCACAGCCCAGCGAGAACCACTGTTAATACTTTGGAATTCCGCCACGCCCAGTAGCTCGATGTGCCCCTCCTGCTTTCGCCCCCCAAAGCACTTTGGGAGGCCAAAGCAGGAGGATCACTTGAGCCTAGGAGTTTAAGGCTGCAATGAGCTATGATCATGCCACTGTACTCTAGCCTGGGCAACAAGAGCAAGACCCTTGGGCCTGGCGCGGTGGCTTACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGACAGGCGGATCACAAGGGCAGG
 


# When the Mobster MEI calls (without being further Refined) is the input, then output record's VCF.FORMAT is:
# GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5MB:MEI3MB
# When the Mobster MEI calls having been further Refined is the input, then output record's VCF.FORMAT is:
# GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ:MEI5MB:MEI3MB
# When the value is not available for a given sample, the sample field will contain . (a period).

# VCF.POS:
# (contains Mobster.Insert_Point)
# (when Mobster and Refined have similar high confident border5 and border3, contains the mid_point between Refined_border5 and Refined_border3)

# VCF.REF:
# (read the reference genome using samtools faidx to get the 1 nucleotide at this CHROM:POS)
#	(eg. samtools faidx human_g1k_v37.fasta 1:700-700 > human_g1k_v37_1_700.fasta

# VCF.ALT:
# 	<INS:ME:ALU> or <INS:ME:HERV> or <INS:ME:LINE1> or <INS:ME:SVA>

# VCF.QUAL:
# calculated using Mobster fields: 
#	cluster5_hits, cluster3_hits, split5_hits, split3_hits, 
#	polyA5_hits, polyT5_hits, polyA3_hits, polyT3_hits, original discordant unique.
# PHRED-like scale: ie. 30 = 1 in 1000 chance of not being a ME, 20 = 1 in 100, 10 = 1 in 10 chance.
#	= log( (2*split5 + 2*split3 + discord5 + discord3 + polyA5+polyT5+polyA3+polyT3 + orig_discord_unique)*10 )

# VCF.INFO:
# IMPRECISE
#	(all MEI variants are flagged as IMPRECISE because they are described by <INS:ME:L1>, not by the entire mobile element sequence

# SVTYPE=INS
# MEINFO=NAME|START|END|POLARITY
#	(START = Mobster.Insert_Point - Mobster 
#	(polarity = . because Mobster results are not phased)
# TARGETSITEDUPL=duplication or deletion or noTSD or unknown (= Mobster.target_site_duplication field)
#	(Mobile elements insert at a point where a recognised sequence already exists in the genome.
#	 Did a small part of this recognition site get duplicated or deleted during the insertion event.)

# For each MEI call, 
# if the MEI call from Mobster and from Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py concord, 
# and if the Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py looks confident and well supported (2 or more supporting reads, border5-position < border3-position), 
# then change this MEI call from IMPRECISE to PRECISE. The word PRECISE does not appear in the INFO field, and it does appear in the sample fields (as specified in the FORMAT field).



__author__ = 'Emma M. Rath'
__copyright__ = 'Copyright 2017, Garvan Institute of Medical Research and Kinghorn Cancer Centre'

import sys
import os
import datetime
import math
import commands
import argparse

DELIMITER_FOR_INFO_MEINFO_FIELD = ','

######################################################
def is_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

######################################################
def convert_to_integer(input_string):
	s_int = 0
	if ((input_string != 'NA') and (input_string != '')):
		s_int = int(input_string)
        return s_int

######################################################
def convert_to_float(input_string):
	s_float = float(0)
	if (input_string != ''):
		s_float = float(input_string)
        return s_float

######################################################
def for_qual_calc(input_count):
	output_count = input_count
	if (input_count > 40):
		output_count = 40
        return output_count

######################################################
def parse_out_any_warnings( command_output, command ):

	outlines = []

	all_outlines = command_output.split("\n")
	for outline in all_outlines:
		is_a_warning_line = False
		if (len(outline) >= 7):
			if (outline[0:7] == 'Warning'):
				is_a_warning_line = True
		if (is_a_warning_line == False):
			outlines.append( outline )

	return outlines

######################################################
def main():

	# what input arguments have been supplied to the program

	parser = argparse.ArgumentParser(description='Read in an uncompressed Mobster predictions file containing mobile element insertion (MEI) calls for a sample, read in the reference data file, receive sample id on input that must appear in VCF file, then create a VCF file containing an MEI variant for each MEI call, then output uncompressed annotated VCF file to stdout.')
	parser.add_argument('-i', action="store", dest="in_Mobster", required=True, help='Input file containing Mobster predictions, that may or may not have been additionally annotated with Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py')
	parser.add_argument('-r', action="store", dest="in_reference_genome", required=True, help='Reference genome. A fasta file indexed by samtools faidx. It will be read to get the REF nucleotide for each MEI position')
	parser.add_argument('-s', action="store", dest="in_sample_id", required=True, help='The sample-id that should appear in sample FORMAT field header in VCF file')
	parser.add_argument('-o', action="store", dest="out_Mobster", required=True, help='Output VCF file containing one line per MEI, with ALT allele in the format <INS:ME:L1>')
	parser.add_argument('-k', action="store", dest="keep_chr_prefix", required=False, help='Mobster puts chr in front of chromosome and this program removes it. If this flag is present then this program will not remove the chr prefix.')
	args = parser.parse_args()

	input_Mobster_predictions_file = args.in_Mobster
	input_reference_genome_fastq_file = args.in_reference_genome # needs to have been indexed with bwa index
	VCF_id_for_this_sample = args.in_sample_id
	output_vcf_file = args.out_Mobster

	# output the first set of VCF file headers

	output_VCF = open(output_vcf_file, 'w')
	output_VCF.write('##fileformat=VCFv4.2' + "\n")
	today = str(datetime.date.today())
	today = today.replace('-','')
	output_VCF.write('##fileDate=' + today + "\n")
	output_VCF.write('##ALT=<ID=INS:ME:ALU,Description="Insertion of ALU element">' + "\n")
	output_VCF.write('##ALT=<ID=INS:ME:L1,Description="Insertion of L1 element">' + "\n")
	output_VCF.write('##ALT=<ID=INS:ME:HERV,Description="Insertion of HERV element">' + "\n")
	output_VCF.write('##ALT=<ID=INS:ME:SVA,Description="Insertion of SVA element">' + "\n")
	output_VCF.write('##INFO=<ID=IMPRECISE,Number=0,Type=Flag,Description="Imprecise structural variation">' + "\n")
	output_VCF.write('##INFO=<ID=SVTYPE,Number=1,Type=String,Description="Type of structural variant">' + "\n")
	meinfo_header = '##INFO=<ID=MEINFO,Number=4,Type=String,Description="Mobile element info of the form NAME' + DELIMITER_FOR_INFO_MEINFO_FIELD + 'START' + DELIMITER_FOR_INFO_MEINFO_FIELD + 'END' + DELIMITER_FOR_INFO_MEINFO_FIELD + 'POLARITY">'
	output_VCF.write(meinfo_header + "\n")
	output_VCF.write('##INFO=<ID=TARGETSITEDUPL,Number=1,Type=String,Description="Did a small part of this recognition site get duplicated or deleted during the insertion event. Values:duplication,deletion,noTSD,unknown">' + "\n")

	# read Mobster input file of mobile element insertion predictions for this sample

	num_fields_from_Mobster_Refine_program = 44

	input_Mobster = open(input_Mobster_predictions_file, 'r')
	input_file_has_refined_border_fields = False
	for inline in input_Mobster:

		inline_strip = inline.strip()
		if (inline_strip != ''):

			if (inline[0:4] == "Chr\t"):
				infields = inline.split("\t")
				if (len(infields) >= num_fields_from_Mobster_Refine_program): # These extra fields will be present when program was run that Refined the Mobster MEI calls.

					input_file_has_refined_border_fields = True

					# output the second set of VCF file headers
					# if the input file is the Refined Mobster MEI calls, then there are more headers than if the input is the Mobster MEI calls

					output_VCF.write('##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEIQUAL,Number=1,Type=String,Description="Quality_score for MEI call based on Mobster read counts log10((split5*10+split3*10+discord5*2+discord3*2+polyA5*2+polyT5*2+polyA3*2+polyT3*2+original_discordant_unique*2)*10">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI5MB,Number=1,Type=String,Description="Mobster_border_5_one_base_pair_after_MEI_3_prime used by Mobster to call MEI">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI3MB,Number=1,Type=String,Description="Mobster_border_3_one_base_pair_before_MEI_5_prime used by Mobster to call MEI">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEIDU,Number=1,Type=String,Description="Mobster target_site_duplication used by Mobster to call MEI">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEIPLY,Number=1,Type=String,Description="poly-A or poly-T sequence seen in MEI or near insertion point. Values are A,T (for whether a poly-A or poly-T sequence was seen respectively), indicating gene direction">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI5RB,Number=1,Type=String,Description="refined_border_5_one_base_pair_after_MEI_3_prime used to refine the Mobster MEI call">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI3RB,Number=1,Type=String,Description="refined_border_3_one_base_pair_before_MEI_5_prime used to refine the Mobster MEI call">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI5SP,Number=1,Type=String,Description="refined_border_5_MEI_fragment_start_pos used to refine the Mobster MEI call">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI3SP,Number=1,Type=String,Description="refined_border_3_MEI_fragment_start_pos used to refine the Mobster MEI call">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI5SQ,Number=1,Type=String,Description="refined_border_5_MEI_fragment_sequence used to refine the Mobster MEI call">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI3SQ,Number=1,Type=String,Description="refined_border_3_MEI_fragment_sequence used to refine the Mobster MEI call">' + "\n")

					output_VCF.write( "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t" + VCF_id_for_this_sample + "\n" )

				else: # The input is the Mobster MEI calls, not the Refined Mobster MEI calls, so output headers for Mobster, not for Refined Mobster

					# output the second set of VCF file headers
					# if the input file is the Refined Mobster MEI calls, then there are more headers than if the input is the Mobster MEI calls

					output_VCF.write('##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEIQUAL,Number=1,Type=String,Description="Quality_score for MEI call based on Mobster read counts log10((split5*10+split3*10+discord5*2+discord3*2+polyA5*2+polyT5*2+polyA3*2+polyT3*2+original_discordant_unique*2)*10">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI5MB,Number=1,Type=String,Description="Mobster_border_5_one_base_pair_after_MEI_3_prime used by Mobster to call MEI">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEI3MB,Number=1,Type=String,Description="Mobster_border_3_one_base_pair_before_MEI_5_prime used by Mobster to call MEI">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEIDU,Number=1,Type=String,Description="Mobster target_site_duplication used by Mobster to call MEI">' + "\n")
					output_VCF.write('##FORMAT=<ID=MEIPLY,Number=1,Type=String,Description="poly-A or poly-T sequence seen in MEI or near insertion point. Values are A,T (for whether a poly-A or poly-T sequence was seen respectively), indicating gene direction">' + "\n")

					output_VCF.write( "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t" + VCF_id_for_this_sample + "\n" )

			elif (inline[0:1] != "#"):

				# prepare a VCF mobile element variant line for each mobile element line in the Mobster input

				infields = inline.split("\t") # don't use inline.strip() because last few fields may be blank and strip will remove the existance of the fields
				last_i = len(infields) - 1
				infields[last_i] = infields[last_i].strip() # remove carriage return which will still be attached to last field

				# fill the VCF.sample.format fields as text
				#ZMEIMIP = str(infields[2]) # insert_point
				MEI5MB = str(infields[3]) # Mobster_border5
				MEI3MB = str(infields[4]) # Mobster_border3
				#ZMEIMM = str(infields[5]) # merged_field
				# infields[6] # sample_id
				#ZMEIMSC = str(infields[7]) # sample_counts
				#ZMEIMSC_split = ZMEIMSC.split('=')
				#ZMEIMSC = str(ZMEIMSC_split[1])
				#ZMEIMC5L = str(infields[8]) # cluster5_length
				#ZMEIMC3L = str(infields[9]) # cluster3_length
				#ZMEIMC5H = str(infields[10]) # cluster5_hits
				#ZMEIMC3H = str(infields[11]) # cluster3_hits
				#ZMEIMS5H = str(infields[12]) # split5_hits
				#ZMEIMS3H = str(infields[13]) # split3_hits
				#ZMEIMA5H = str(infields[14]) # polyA5_hits
				#ZMEIMT5H = str(infields[15]) # polyT5_hits
				#ZMEIMA3H = str(infields[16]) # polyA3_hits
				#ZMEIMT3H = str(infields[17]) # polyT3_hits
				#ZMEIMODU = str(infields[18]) # original_discordant_unique
				#ZMEIMOM = str(infields[19]) # original_multiple
				#ZMEIMOU = str(infields[20]) # original_unmapped
				#ZMEIMLMD = str(infields[21]) # leftclipped_max_dist
				#ZMEIMRMD = str(infields[22]) # rightclipped_max_dist
				#ZMEIMLSP = str(infields[23]) # leftclipped_same_pos
				#ZMEIMRSP = str(infields[24]) # rightclipped_same_pos
				#ZMEIMCAQ = str(infields[25]) # clipped_avg_qual
				#ZMEIMCAL = str(infields[26]) # clipped_avg_length

				chrom = infields[0]	# Chr
				if args.keep_chr_prefix is not None:
					dont_remove_chr_because_bam_file_has_it = 1
				else:
					if (len(chrom) >= 3):
						if (chrom[0:3] == 'chr'):
							chrom = chrom[3:]
				chrom = str(chrom)
				mobster_insert_point = int(infields[2])
				pos = str(mobster_insert_point)
				id_field = '.'
				mobile_element_type = str(infields[1])
				alt = '<INS:ME:' + mobile_element_type + '>'
				mobster_border5 = int(infields[3])
				mobster_border3 = int(infields[4])
				cluster5 = convert_to_integer( infields[10] ) # cluster5_hits
				cluster3 = convert_to_integer( infields[11] ) # cluster3_hits
				split5 = convert_to_integer( infields[12] ) # split5_hits
				split3 = convert_to_integer( infields[13] ) # split3_hits
				polyA5 = convert_to_integer( infields[14] ) # polyA5_hits
				polyT5 = convert_to_integer( infields[15] ) # polyT5_hits
				polyA3 = convert_to_integer( infields[16] ) # polyA3_hits
				polyT3 = convert_to_integer( infields[17] ) # polyT3_hits
				original_discordant_unique = convert_to_integer( infields[18] )
				target_site_duplication = infields[27]

				discord5 = cluster5 - split5
				discord3 = cluster3 - split3
				Qsplit5 = for_qual_calc( split5 )
				Qsplit3 = for_qual_calc( split3 )
				Qdiscord5 = for_qual_calc( discord5 )
				Qdiscord3 = for_qual_calc( discord3 )
				QpolyA5 = for_qual_calc( polyA5 )
				QpolyT5 = for_qual_calc( polyT5 )
				QpolyA3 = for_qual_calc( polyA3 )
				QpolyT3 = for_qual_calc( polyT3 )
				Qoriginal_discordant_unique = for_qual_calc( original_discordant_unique )
				# qual = infields[28]

				# Calculate the quality score from Mobster fields so that it can be recorded in the VCF file.
				# However, if the input file already has a quality score, then it will be recorded in the VCF file instead, further down.

				qual = math.log( (Qsplit5*10 + Qsplit3*10 + Qdiscord5*2 + Qdiscord3*2 + QpolyA5*2 + QpolyT5*2 + QpolyA3*2 + QpolyT3*2 + Qoriginal_discordant_unique*2), 10 ) * 10
				qual = str(int(round(qual)))
				MEIQUAL = qual
				filter_field = '.'
				meinfo_name = '<INS:ME:' + mobile_element_type + '>'
				meinfo_start = mobster_border5 - mobster_insert_point
				meinfo_end = mobster_border3 - mobster_insert_point
				meinfo_polarity = '.'
				meinfo = 'MEINFO=' + mobile_element_type + DELIMITER_FOR_INFO_MEINFO_FIELD + str(meinfo_start) + DELIMITER_FOR_INFO_MEINFO_FIELD + str(meinfo_end) + DELIMITER_FOR_INFO_MEINFO_FIELD + meinfo_polarity
				targetsitedupl = target_site_duplication
				if (target_site_duplication == 'no tsd'):
					targetsitedupl = 'noTSD'
				targetsitedupl = targetsitedupl.replace(' ','')
				MEIDU = targetsitedupl
				if (MEIDU == ''):
					MEIDU = '.'
				targetsitedupl = 'TARGETSITEDUPL=' + targetsitedupl
				info = 'IMPRECISE;SVTYPE=INS;' + meinfo + ';' + targetsitedupl
				format_field = 'GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY'

				sample_field_GT = '1/.' # to show that at least one allele of this sample has the mobile element, don't know if other is ref.seq. or mobile element
				MEIPLY = '.'
				if ((polyA5 > 0) or (polyA3 > 0)):
					MEIPLY = 'A'
				elif ((polyT5 > 0) or (polyT3 > 0)):
					MEIPLY = 'T'
				sample_field = sample_field_GT + ':' + MEIQUAL + ':' + MEI5MB + ':' + MEI3MB + ':' + MEIDU + ':' + MEIPLY

				inhouse_border5 = ''
				inhouse_border3 = ''

				if (input_file_has_refined_border_fields):

					# All format fields must be the same.
					# Otherwise the pipeline will fail further along in python merge_a_multi_sample_VCF_for_similar_position_variants.py
					# when we try to merge similar position MEIs from more than one sample.
					# Also, when GATK CombineVariants combines samples having different format fields, it has been observed to mix up fields,
					# so it also needs all format fields to be the same for every sample in the VCF file.
					format_field = 'GT:MEIQUAL:MEI5MB:MEI3MB:MEIDU:MEIPLY:MEI5RB:MEI3RB:MEI5SP:MEI3SP:MEI5SQ:MEI3SQ'
					sample_field = sample_field_GT + ':' + qual + ':' + MEI5MB + ':' + MEI3MB + ':' + MEIDU + ':' + MEIPLY + ':.:.:.:.:.:.'

					if (len(infields) > num_fields_from_Mobster_Refine_program): # Even if the Refined program was run, it may not have filled these fields, when it didn't find any data for this MEI

						# Modify the Mobster MEI call information with the more additional information from the refinement program Mobelwrap_convert_Mobster_predictions_into_Refined_predictions.py

						# fill the VCF.sample.format fields as text
						MEI5RB = str(infields[29]) # refined_border5
						MEI3RB = str(infields[30]) # refined_border3
						MEI5SP = str(infields[31]) # refined_border5_MEI_sequence_fragment_start_pos
						MEI3SP = str(infields[32]) # refined_border3_MEI_sequence_fragment_start_pos
						#ZMEIR5FC = str(infields[33]) # refined_border5_avg_read_count_for_MEI_read_fragment
						#ZMEIR3FC = str(infields[34]) # refined_border3_avg_read_count_for_MEI_read_fragment
						#ZMEIR5FL = str(infields[35]) # refined_border5_length_of_MEI_read_fragment
						#ZMEIR3FL = str(infields[36]) # refined_border3_length_of_MEI_read_fragment
						#ZMEIR5RM = str(infields[37]) # refined_border5_percent_that_non_MEI_part_of_MEI_fragments_matches_reference
						#ZMEIR3RM = str(infields[38]) # refined_border3_percent_that_non_MEI_part_of_MEI_fragments_matches_reference
						#ZMEIRS = str(infields[39]) # refined_ref_seq_spanning_sequence_seen
						#ZMEIRSS = str(infields[40]) # refined_ref_seq_spanning_sequence_seen_start_pos
						#ZMEIRSE = str(infields[41]) # refined_ref_seq_spanning_sequence_seen_end_pos
						#ZMEIRSC = str(infields[42]) # refined_ref_seq_spanning_sequence_seen_num_reads
						MEI5SQ = str(infields[43]) # refined_border5_MEI_sequence_fragment
						MEI3SQ = str(infields[44]) # refined_border3_MEI_sequence_fragment
						if (MEI5RB == ''):
							MEI5RB = '.'
						if (MEI3RB == ''):
							MEI3RB = '.'
						if (MEI5SP == ''):
							MEI5SP = '.'
						if (MEI3SP == ''):
							MEI3SP = '.'
						if (MEI5SQ == ''):
							MEI5SQ = '.'
						if (MEI3SQ == ''):
							MEI3SQ = '.'

						inhouse_border5 = infields[29] # refined_border5
						inhouse_border3 = infields[30] # refined_border3
						refined_border5_MEI_sequence_fragment_start_pos = infields[31] # refined_border5_MEI_sequence_fragment_start_pos
						refined_border3_MEI_sequence_fragment_start_pos = infields[32] # refined_border3_MEI_sequence_fragment_start_pos
						inhouse_border5_avg_read_count_for_MEI_read_fragment = convert_to_float( infields[33] ) # refined_border5_avg_read_count_for_MEI_read_fragment
						inhouse_border3_avg_read_count_for_MEI_read_fragment = convert_to_float( infields[34] ) # refined_border3_avg_read_count_for_MEI_read_fragment
						inhouse_border5_length_of_MEI_read_fragment = convert_to_integer( infields[35] ) # refined_border5_length_of_MEI_read_fragment
						inhouse_border3_length_of_MEI_read_fragment = convert_to_integer( infields[36] ) # refined_border3_length_of_MEI_read_fragment
						inhouse_border5_percent_that_non_MEI_part_of_MEI_fragments_matches_reference = convert_to_integer( infields[37] ) # refined_border5_percent_that_non_MEI_part_of_MEI_fragments_matches_reference
						inhouse_border3_percent_that_non_MEI_part_of_MEI_fragments_matches_reference = convert_to_integer( infields[38] ) # refined_border3_percent_that_non_MEI_part_of_MEI_fragments_matches_reference
						refined_ref_seq_spanning_sequence_seen = infields[39] # refined_ref_seq_spanning_sequence_seen
						refined_ref_seq_spanning_sequence_seen_start_pos = infields[40] # refined_ref_seq_spanning_sequence_seen_start_pos
						refined_ref_seq_spanning_sequence_seen_end_pos = infields[41] # refined_ref_seq_spanning_sequence_seen_end_pos
						refined_ref_seq_spanning_sequence_seen_num_reads = infields[42] # refined_ref_seq_spanning_sequence_seen_num_reads
						refined_border5_MEI_sequence_fragment = infields[43] # refined_border5_MEI_sequence_fragment
						refined_border3_MEI_sequence_fragment = infields[44] # refined_border3_MEI_sequence_fragment

						if (MEIPLY == '.'): # if this field has not yet been filled according to Mobster seeing a cluster of poly-A or poly-T
							if ( (MEI5SQ.find('AAAAAAAAAA') > -1) or (MEI3SQ.find('AAAAAAAAAA') > -1) ):
								MEIPLY = 'A'
							elif ( (MEI5SQ.find('TTTTTTTTTT') > -1) or (MEI3SQ.find('TTTTTTTTTT') > -1) ):
								MEIPLY = 'T'
						if (refined_ref_seq_spanning_sequence_seen == 'Seen'):
							sample_field_GT = '0/1' # We saw ref.seq. in addition to MEI, so the MEI must be on only 1 strand
						elif (refined_ref_seq_spanning_sequence_seen == 'NotSeen'):
							sample_field_GT = '1/1' # We didn't see ref.seq. so this MEI must be on both strands
						elif (refined_ref_seq_spanning_sequence_seen == 'SeenUndetermined'):
							sample_field_GT = '1/.' # We didn't figure out whether we saw ref.seq. (not enough reads in that region)
						sample_field = sample_field_GT + ':' + MEIQUAL + ':' + MEI5MB + ':' + MEI3MB + ':' + MEIDU + ':' + MEIPLY + ':' + MEI5RB + ':' + MEI3RB + ':' + MEI5SP + ':' + MEI3SP + ':' + MEI5SQ + ':' + MEI3SQ

						# In certain circumstances, convert the IMPRECISE Mobster call to PRECISE
						highly_confident_refinement_call = False
						if ((inhouse_border5_avg_read_count_for_MEI_read_fragment > 2) and (inhouse_border3_avg_read_count_for_MEI_read_fragment > 2)):
							highly_confident_refinement_call = True
						mobster_call_same_as_refinement_call = False
						if ( is_integer(inhouse_border5) and is_integer(inhouse_border3) ):
							if ( (abs(mobster_border5 - int(inhouse_border5)) < 5) and (abs(mobster_border3 - int(inhouse_border3)) < 5) ):
								mobster_call_same_as_refinement_call = True
						if ((highly_confident_refinement_call) and (mobster_call_same_as_refinement_call)):
							mid_point = int((abs(int(inhouse_border5) - int(inhouse_border3)) / 2) + min(int(inhouse_border5), int(inhouse_border3)))
							pos = str(mid_point)
							meinfo_start = int(inhouse_border5) - mid_point
							meinfo_end = int(inhouse_border3) - mid_point
							meinfo = 'MEINFO=' + mobile_element_type + DELIMITER_FOR_INFO_MEINFO_FIELD + str(meinfo_start) + DELIMITER_FOR_INFO_MEINFO_FIELD + str(meinfo_end) + DELIMITER_FOR_INFO_MEINFO_FIELD + meinfo_polarity
							info = 'SVTYPE=INS;' + meinfo + ';' + targetsitedupl
						else:
							if ((highly_confident_refinement_call) or (mobster_call_same_as_refinement_call)):
								info = 'SVTYPE=INS;' + meinfo + ';' + targetsitedupl

				# get the reference genome nucleotide for this position, to fill REF
				# don't get it if it is negative, eg. if Mobster mapped the mobile element to before the start of an unmapped genomic contig
				# eg. chrGL000237.1	ALU	-23	-20	20

				ref = '.'
				if (mobster_insert_point >= 1):
					command_output_lines = []
					samtools_faidx_position = chrom + ':' + pos + '-' + pos
					samtools_faidx_command = 'samtools faidx ' + input_reference_genome_fastq_file + ' ' + samtools_faidx_position
					command_status, command_output = commands.getstatusoutput( samtools_faidx_command )
					if (command_status != 0):
						raise ValueError("\n\nWas not able to get REF position from reference genome using command: " + samtools_faidx_command + "\n Command status is: " + str(command_status) + "\nThus will not continue processing any more mobile elements.\n")
					else:
						command_output_lines = parse_out_any_warnings( command_output, samtools_faidx_command )
					# some positions that mobile element mapped to may not be found in reference genome
					# eg. hs37d5:180728
					if (len(command_output_lines) > 1):
						ref = command_output_lines[1].strip()

				# output a VCF mobile element variant line for each mobile element line in the Mobster input

				outline = chrom + "\t" + pos + "\t" + id_field + "\t" + ref + "\t" + alt + "\t" + qual + "\t" + filter_field + "\t" + info + "\t" + format_field + "\t" + sample_field + "\n"
				output_VCF.write( outline )

	output_VCF.close()


if __name__=='__main__':
    main()


